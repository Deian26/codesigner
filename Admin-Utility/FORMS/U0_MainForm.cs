using Admin_Utility.FORMS.Diagnostics;
using Admin_Utility.UTILITY;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.Versioning;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using static Admin_Utility.Security;
using static Admin_Utility.Utility;

namespace Admin_Utility
{
    /// <summary>
    /// Provides access to diagnostic actions and statuses
    /// </summary>
    [SupportedOSPlatform("windows")]
    public partial class U0_MainForm : Form
    {
        /// <summary>
        /// Creates a form used to access diagnostic actions and statuses
        /// </summary>
        public U0_MainForm()
        {
            InitializeComponent();

            // store session data
            //===========================================================================================================//
            // NOTE: currently, the default and only security level granted for Admin-Utility users is ADMIN_WORKSTATION //
            //===========================================================================================================//

            // the username is taken as the currently logged in user
            string username = "DEV";
#if RELEASE
            username = System.Environment.UserName;
#endif
            Utility.SetSession(username, Security.AccessLevel.ADMIN_WORKSTATION);
            this.U0_textBox_UsernameDisplay.Text = Utility.GetSession().UserName;
            this.U0_textBox_AccessLevelDisplay.Text = Enum.GetName(Utility.GetSession().AccessLevel);

            // set the initial state of the development token checkbox
#if DEBUG
            this.U0_checkBox_DevelopmentToken.Checked = true; // dev mode
#else
            this.U0_checkBox_DevelopmentToken.Checked = false; // release mode
#endif
            // set max expiration limits and select the first one
            this.U0_comboBox_TokenExpiration.Items.AddRange(Security.TokenExpirationLimits);
            this.U0_comboBox_TokenExpiration.SelectedIndex = 0;

            // set access levels and select the first one
            this.U0_comboBox_TokenAccessLevel.Items.AddRange(Enum.GetNames(typeof(Security.AccessLevel)));
            this.U0_comboBox_TokenAccessLevel.SelectedIndex = 0;

            // start a background, parallel process to load tokens generated by the current user
            this.U0_backgroundWorker_LoadCrtUserGeneratedTokens.RunWorkerAsync(Utility.GetSession());
        }


        private void U0_button_GenerateToken_Click(object sender, EventArgs e)
        {
            // compute and display the generator ID
            this.U0_richTextBox_GeneratorIdDisplay.Text = Security.GetGeneratorId(this.U0_checkBox_DevelopmentToken.Checked); // the generator ID is computed in the first call of this method

            // generate a new token and display it
            this.U0_richTextBox_GeneratedToken.Text = Security.GenerateToken(
                this.U0_comboBox_TokenAccessLevel.SelectedItem.ToString(),
                this.U0_comboBox_TokenExpiration.SelectedItem.ToString()).ToString();

        }

        private void U0_button_OpenDiagnosticsReport_Click(object sender, EventArgs e)
        {
            // load a diagnostic report into a new Diagnostic Investigator form
            if (this.U0_openFileDialog_OpenDiagnosticsReport.ShowDialog() == DialogResult.OK)
            {
                U1_DiagnosticReportInvestigator u1_DiagReportInvestigator = new U1_DiagnosticReportInvestigator(this.U0_openFileDialog_OpenDiagnosticsReport.FileName);
                if (u1_DiagReportInvestigator.IsDisposed == false) u1_DiagReportInvestigator.Show();

            }
        }

        private void U0_MainForm_Load(object sender, EventArgs e)
        {

        }

        private void U0_checkBox_DevelopmentToken_CheckedChanged(object sender, EventArgs e)
        {

        }

        /// <summary>
        /// Adds the given token details to the tree node displaying tokens generated by the current user
        /// </summary>
        /// <param name="token">Token</param>
        internal void addTokenNode(Token token)
        {
            try
            {
                TreeNode tokenNode = this.U0_treeView_CrtUserGeneratedTokens.Nodes.Add(token.ToString(), $"Token {this.U0_treeView_CrtUserGeneratedTokens.Nodes.Count + 1}");

                // add details as sub-nodes
                tokenNode.Nodes.Add("TokenString", "Token: " + token.ToString()).ToolTipText = "Token string";
                tokenNode.Nodes.Add("TokenAccessLevel","Token access level: "+token.ACCESS_LEVEL);
                tokenNode.Nodes.Add("TokenTimeStamp","Token generation timestamp: "+token.TS);

                tokenNode.Nodes.Add("Username", "Username: " + Utility.GetSession().UserName).ToolTipText = "Username";
                tokenNode.Nodes.Add("UserAccesslevel", "User access level: " + Enum.GetName(Utility.GetSession().AccessLevel)).ToolTipText = "User access level";

            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error adding token to the list of tokens generated by the current user. {ex.Message}", "Error adding token", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // DoWork event for the background worker that loads the tokens generated by the current user
        private void U0_backgroundWorker_LoadCrtUserGeneratedTokens_DoWork(object sender, DoWorkEventArgs e)
        {
            Utility.Session session = (Utility.Session)(e.Argument);

            try
            {
                // parse the files containing the tokens generated by the current user
                string crtUserGeneratedTokensFolderPath = Path.Combine(session.UserLocalFolder, GeneralPaths.SEC_GENERATED_TOKENS_SUBDIR_NAME);

                if (Directory.Exists(crtUserGeneratedTokensFolderPath) == true)
                {
                    foreach (string filePath in Directory.EnumerateFiles(crtUserGeneratedTokensFolderPath))
                    {
                        // read and decrypt file contents
                        string xmlText = Security.DecryptForUser(File.ReadAllText(filePath));

                        // parse XML data
                        XmlDocument xml = new XmlDocument();
                        xml.LoadXml(xmlText);
                        XmlNode root = xml.DocumentElement;

                        this.BeginInvoke(new Action(() =>
                        {
                            // check if the 'token' attribute exists
                            if (root.Attributes["token"] == null) throw new Exception("Missing attribute 'token'");

                            TreeNode tokenNode = this.U0_treeView_CrtUserGeneratedTokens.Nodes.Add(root.Attributes["token"].Value, $"Token {this.U0_treeView_CrtUserGeneratedTokens.Nodes.Count + 1}");

                            // add details as sub-nodes
                            tokenNode.Nodes.Add("TokenString", "Token: " + root.Attributes["token"].Value).ToolTipText = "Token string";

                            string tokenAccessLevel = "Error-token-access-level";
                            if (root.Attributes["token-access-level"] != null) tokenAccessLevel = root.Attributes["token-access-level"].Value;
                            tokenNode.Nodes.Add("TokenAccessLevel", "Token access level: " + tokenAccessLevel).ToolTipText = "Token access level";

                            string tokenTS = "Error-token-ts";
                            if (root.Attributes["token-ts"] != null) tokenTS = root.Attributes["token-ts"].Value;
                            tokenNode.Nodes.Add("TokenTimeStampUtc", "Token timestamp UTC: " + tokenTS).ToolTipText = "Token timestamp (UTC)";

                            string username = "Error-username";
                            if (root.Attributes["user-name"] != null) username = root.Attributes["user-name"].Value;
                            tokenNode.Nodes.Add("Username", "Username: " + username).ToolTipText = "Username";

                            string userAccessLevel = "Error-userAccessLevel";
                            if (root.Attributes["user-access-level"] != null) userAccessLevel = root.Attributes["user-access-level"].Value;
                            tokenNode.Nodes.Add("UserAccesslevel", "User access level: " + userAccessLevel).ToolTipText = "User access level";

                        }));
                    }
                } //=> else: the current user has not generated any tokens yet
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Could not load tokens generated by the current user ({session.UserName}) from the disk: {ex.Message}", "Error loading generated tokens", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
