<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Admin-Utility</name>
    </assembly>
    <members>
        <member name="T:Admin_Utility.FORMS.Diagnostics.U1_DiagnosticReportInvestigator">
            <summary>
            Loads the diagnostics report found at the given path
            </summary>
        </member>
        <member name="M:Admin_Utility.FORMS.Diagnostics.U1_DiagnosticReportInvestigator.#ctor(System.String)">
            <summary>
            Creates a new diagnostic report investigator form
            </summary>
            <param name="reportPath">The report file path</param>
        </member>
        <member name="M:Admin_Utility.FORMS.Diagnostics.U1_DiagnosticReportInvestigator.parseNodes(System.Xml.XmlNode,System.Windows.Forms.TreeNode)">
            <summary>
            Recursively parses an XML tree representing a diagnostic report and displays the data contained within, in this form
            </summary>
            <param name="root">Tree / sub-tree root</param>
            <param name="displayRoot">Tree node used to display details about the current XML node (root)</param>
            <returns>The root of the next sub-tree to parse</returns>
        </member>
        <member name="M:Admin_Utility.FORMS.Diagnostics.U1_DiagnosticReportInvestigator.openReport">
            <summary>
            Opens the current report file
            </summary>
            <returns>true if the report could be opened; false, otherwise</returns>
        </member>
        <member name="F:Admin_Utility.FORMS.Diagnostics.U1_DiagnosticReportInvestigator.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Admin_Utility.FORMS.Diagnostics.U1_DiagnosticReportInvestigator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Admin_Utility.FORMS.Diagnostics.U1_DiagnosticReportInvestigator.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Admin_Utility.U0_MainForm">
            <summary>
            Provides access to diagnostic actions and statuses
            </summary>
        </member>
        <member name="M:Admin_Utility.U0_MainForm.#ctor">
            <summary>
            Creates a form used to access diagnostic actions and statuses
            </summary>
        </member>
        <member name="M:Admin_Utility.U0_MainForm.addTokenNode(Admin_Utility.Security.Token)">
            <summary>
            Adds the given token details to the tree node displaying tokens generated by the current user
            </summary>
            <param name="token">Token</param>
        </member>
        <member name="F:Admin_Utility.U0_MainForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Admin_Utility.U0_MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Admin_Utility.U0_MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Admin_Utility.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Admin_Utility.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Admin_Utility.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Admin_Utility.Security">
            <summary>
            Handles security-relevant avtions
            </summary>
        </member>
        <member name="T:Admin_Utility.Security.Token">
            <summary>
            Defines a token; fields are separeted by 'Token.FIELD_SEPARATOR'
            </summary>
        </member>
        <member name="M:Admin_Utility.Security.Token.#ctor(System.String,System.Int32)">
            <summary>
            Generates a new token which grants the specified access level
            </summary>
            <param name="accessLevel">Access to be provided by the token</param>
            <param name="expirationLimitSec">Expiration limit, in seconds, for this token (since its generation)</param>
        </member>
        <member name="M:Admin_Utility.Security.Token.ToString">
            <summary>
            Returns the string representation of the current Token object
            </summary>
            <returns>Token string or null, if the token is invalid</returns>
        </member>
        <member name="M:Admin_Utility.Security.AddGeneratedToken(Admin_Utility.Security.Token)">
            <summary>
            Adds the given token to the list of tokens generated by the current user
            </summary>
            <param name="token">The token to add to the list</param>
        </member>
        <member name="M:Admin_Utility.Security.GenerateHash(System.String)">
            <summary>
            Generates the hash for the provided input text
            </summary>
            <param name="input">Text to be hashed</param>
            <returns>Hashed text or null</returns>
        </member>
        <member name="M:Admin_Utility.Security.GetGeneratorId(System.Boolean)">
            <summary>
            Generates the machine's generator base ID
            </summary>
            <param name="developmentId">if true, the development generator id will be used</param>
            <returns>The machine's generator ID</returns>
        </member>
        <member name="M:Admin_Utility.Security.ToByteString(System.Byte[])">
            <summary>
            Generates and returns the byte-string corresponding to the given byte array
            </summary>
            <param name="bytes">Array to be converted</param>
            <returns>A hexadecimal string representing the input byte array</returns>
        </member>
        <member name="M:Admin_Utility.Security.GenerateToken(System.String,System.String)">
            <summary>
            Generates a new token, with the specified access level and returns its string representation
            </summary>
            <param name="accessLevel">Access to be granted</param>
            <param name="expirationLimitSec">Expiration limit, in seconds, for the token, since its generation</param>
            <returns>The generated token object or null, if an error occurs</returns>
        </member>
        <member name="M:Admin_Utility.Security.RsaDecrypt(System.String)">
            <summary>
            Decrypts the given RSA-encrypted text
            </summary>
            <param name="cipherText">Text to decrypt</param>
            <returns>Plain text as a Base64 encoded string</returns>
        </member>
        <member name="M:Admin_Utility.Security.CreateAndStoreRsaParameters">
            <summary>
            Creates and stores a set of RSA parameters used for encrypting communication sent to the Admin-Utility
            </summary>
            <return>The RSA public key hexadecimal-string</return>
        </member>
        <member name="M:Admin_Utility.Security.AesDecrypt(System.String,System.String,System.String)">
            <summary>
            Decrypts the given AES-encrypted text
            </summary>
            <param name="cipherText">The text to decrypt; must be a Base64 encoded hexadecimal string</param>
            <param name="stringKey">The AES key used to decrypt the text; must be a Base64 encoded hexadecimal string</param>
            <param name="stringIv">AES IV as a Base64 encoded string</param>
            <returns>The plain text</returns>
        </member>
        <member name="M:Admin_Utility.Security.AesDecryptFile(System.String)">
            <summary>
            Decrypts the AES-encrypted text stored at reportPath (uses an RSA-encrypted key, stored together with the AES-encrypted data)
            </summary>
            <param name="reportPath">Encrypted file path</param>
            <returns>The decrypted text</returns>
        </member>
        <member name="M:Admin_Utility.Security.EncryptForUser(System.String)">
            <summary>
            Encrypts the given data for storage (only the user that encrypted the data can decrypt it)
            </summary>
            <param name="plainText">Text to encrypt</param>
            <returns>Encrypted text (can only be decrypted by the user that encrypted it)</returns>
        </member>
        <member name="M:Admin_Utility.Security.DecryptForUser(System.String)">
            <summary>
            Decrypts the given text, for the current user
            </summary>
            <param name="cipherText">The text to decrypt</param>
            <returns>The plain text corresponding to the cipher text</returns>
        </member>
        <member name="M:Admin_Utility.Security.StoreToken(Admin_Utility.Security.Token)">
            <summary>
            Stores the provided token string locally, in a separate, encrypted file
            </summary>
            <param name="token">Token to be stored</param>
        </member>
        <member name="T:Admin_Utility.UTILITY.GeneralPaths">
            <summary>
            Paths and names
            </summary>
        </member>
        <member name="T:Admin_Utility.Utility">
            <summary>
            Handles utility functions
            </summary>
        </member>
        <member name="T:Admin_Utility.Utility.Session">
            <summary>
            Stores details about the current session
            </summary>
        </member>
        <member name="M:Admin_Utility.Utility.SetSession(System.String,Admin_Utility.Security.AccessLevel)">
            <summary>
            Sets details about the current session
            </summary>
            <param name="UserName">Current user</param>
            <param name="AccessLevel">Current user's access level</param>
        </member>
        <member name="M:Admin_Utility.Utility.GetSession">
            <summary>
            Retrieves details about the current session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Admin_Utility.Utility.ConfigDataExists">
            <summary>
            Checks if the setup configuration data archive exists
            </summary>
            <returns>true if the data exists, false otherwise</returns>
        </member>
        <member name="M:Admin_Utility.Utility.GenerateSetupConfigData">
            <summary>
            Checks if the necessary configuration data already exist and if not, this method creates it.
            </summary>
            <returns>true if configuration data was generated, false otherwise</returns>
        </member>
    </members>
</doc>
